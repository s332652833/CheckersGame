/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practice;

/**
 *
 * @author Arup
 */
import java.awt.*;  
import java.awt.event.MouseEvent;  
import java.awt.event.MouseListener;  
import java.awt.geom.Ellipse2D;
import javax.swing.JFrame;

public class MouseMovement extends Frame implements MouseListener{  
    public int xred[] = new int[12];
    public int yred[] = new int[12];
    public int xblue[] = new int[12];
    public int yblue[] = new int[12];
    public int turn = 0;
    Label l;  
    Color c=Color.BLUE;  
    MouseMovement(){  
    l=new Label();  
    l.setBounds(20,40,100,20);  
    add(l);  
      
    addMouseListener(this);  

    setLayout(null);   
    setTitle("2 Player Checkers");
    setSize(600,600);
    setVisible(true); 
    setResizable(false);

    
            
}  
    public void board(){
        Graphics g=getGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(100, 100, 400, 400);
        g.setColor(Color.BLACK);
        for(int i = 150; i <= 450; i+=100){
            for(int j = 100; j <= 400; j+=100){
                g.fillRect(i, j, 50, 50);
            }
        }

        for(int i = 100; i <= 400; i+=100){
            for(int j = 150; j <= 450; j+=100){
                g.fillRect(i, j, 50, 50);
            }
        }
    }
    public void ResetPiece(){
       int count1 = 0;
       int count2 = 0;
       for (int h = 0; h<3; h++){
           //Red Piece starting x position
         for (int ax = 100; ax < 500; ax += 100) {

               if (h == 1) {
                  xred[count1] = ax;
               } else {
                   xred[count1] = ax + 50; 
               }
               count1++;
           }
           //Red Piece starting y position
           for (int b = 0; b<4; b++){
               yred[b] = 100;
               yred[b+4] = 150;
               yred[b+8] = 200;
           }
           //Blue Piece starting x position
           for (int bx = 100; bx < 500; bx += 100) {
               if (h == 1) {
                  xblue[count2] = bx + 50;
               } else {
                   xblue[count2] = bx; 
               }
               count2++;
           }
           //Blue Piece starting y position
           for (int b = 0; b<4; b++){
               yblue[b] = 350;
               yblue[b+4] = 400;
               yblue[b+8] = 450;
           }         
         }
        
       }
    public void print(){
        Graphics g=getGraphics();
        Ellipse2D red1 = new Ellipse2D.Double(xred[0],yred[0],50,50);
        Ellipse2D red2 = new Ellipse2D.Double(xred[1],yred[1],50,50);
        Ellipse2D red3 = new Ellipse2D.Double(xred[2],yred[2],50,50);
        Ellipse2D red4 = new Ellipse2D.Double(xred[3],yred[3],50,50);

        Ellipse2D red5 = new Ellipse2D.Double(xred[4],yred[4],50,50);
        Ellipse2D red6 = new Ellipse2D.Double(xred[5],yred[5],50,50);
        Ellipse2D red7 = new Ellipse2D.Double(xred[6],yred[6],50,50);
        Ellipse2D red8 = new Ellipse2D.Double(xred[7],yred[7],50,50);

        Ellipse2D red9 = new Ellipse2D.Double(xred[8],yred[8],50,50);
        Ellipse2D red10 = new Ellipse2D.Double(xred[9],yred[9],50,50);
        Ellipse2D red11 = new Ellipse2D.Double(xred[10],yred[10],50,50);
        Ellipse2D red12 = new Ellipse2D.Double(xred[11],yred[11],50,50);

        Ellipse2D blue1 = new Ellipse2D.Double(xblue[0],yblue[0],50,50);
        Ellipse2D blue2 = new Ellipse2D.Double(xblue[1],yblue[1],50,50);
        Ellipse2D blue3 = new Ellipse2D.Double(xblue[2],yblue[2],50,50);
        Ellipse2D blue4 = new Ellipse2D.Double(xblue[3],yblue[3],50,50);

        Ellipse2D blue5 = new Ellipse2D.Double(xblue[4],yblue[4],50,50);
        Ellipse2D blue6 = new Ellipse2D.Double(xblue[5],yblue[5],50,50);
        Ellipse2D blue7 = new Ellipse2D.Double(xblue[6],yblue[6],50,50);
        Ellipse2D blue8 = new Ellipse2D.Double(xblue[7],yblue[7],50,50);

        Ellipse2D blue9 = new Ellipse2D.Double(xblue[8],yblue[8],50,50);
        Ellipse2D blue10 = new Ellipse2D.Double(xblue[9],yblue[9],50,50);
        Ellipse2D blue11 = new Ellipse2D.Double(xblue[10],yblue[10],50,50);
        Ellipse2D blue12 = new Ellipse2D.Double(xblue[11],yblue[11],50,50);
        
        Graphics2D g2 = (Graphics2D) g;
        g2.setPaint(Color.RED);        
        g2.fill(red1);
        g2.fill(red2);
        g2.fill(red3);
        g2.fill(red4);
        g2.fill(red5);
        g2.fill(red6);
        g2.fill(red7);
        g2.fill(red8);
        g2.fill(red9);
        g2.fill(red10);
        g2.fill(red11);
        g2.fill(red12);

        g2.setPaint(Color.BLUE);
        g2.fill(blue1);
        g2.fill(blue2);
        g2.fill(blue3);
        g2.fill(blue4);        
        g2.fill(blue5);
        g2.fill(blue6);
        g2.fill(blue7);
        g2.fill(blue8);
        g2.fill(blue9);
        g2.fill(blue10);
        g2.fill(blue11);
        g2.fill(blue12); 
 
    }
    public void findred(int x, int y) {
        Graphics g=getGraphics() ; 
        for (int i = 0; i<= 12; i++){
            if (xred[i] == x && yred[i] == y) {
                g.setColor (Color.YELLOW);
                g.drawOval(xred[i]+1,yred[i]+1,48,48);                                 
            }           
            //DRAWS RECTANGLE ON OPEN SPOTS
            if (xred[i]+50 == x+50 && yred[i] + 50 == y+50) {
                g.drawRect(xred[i]+50,yred[i]+50,50,50);  
            } else if(xred[i]-50 == x-50 && yred[i] + 50 == y+50) {
                g.drawRect(xred[i]-50,yred[i]+50,50,50);  
                
            } else if(xblue[i]+50 == x+50 && yblue[i] + 50 == y+50) {
                g.drawRect(xblue[i]+50,yblue[i]+50,50,50);
            } else if(xblue[i]-50 == x-50 && yblue[i] + 50 == y+50) {
                g.drawRect(xblue[i]+50,yblue[i]+50,50,50);  
            }
        }
     }

    public void findblue(int x, int y) {
        Graphics g=getGraphics() ; 
        for (int i = 0; i<= 12; i++){
            if (xblue[i] == x && yblue[i] == y) {
                    g.setColor (Color.YELLOW);
                    g.drawOval(xblue[i]+1,yblue[i]+1,48,48);
            }
        }
     }
    
    public void findpiece (int x, int y){ 
        Graphics g=getGraphics() ; 
        for(int i = 150; i <= 450; i+=100){
            for(int j = 100; j <= 400; j+=100){
                if (x >= i &&x<=i+50 && y >= j && y <=j+50 ) {
                        findred(i,j); 
                      
            }
        }
        }
    


        for(int i = 100; i <= 400; i+=100){
            for(int j = 150; j <= 450; j+=100){
                if (x >= i && x<=i+50 && y >= j && y <=j+50 ) {
                        findred(i,j);
                        g.setColor(Color.YELLOW);
                        g.drawRect(i-50,j+50,50,50);      
                        g.drawRect(i+50,j+50,50,50);   
                }
        }
    }
    }
    
    public void check(int x, int y){
         Graphics g=getGraphics() ; 
        for(int i = 150; i <= 450; i+=100){
            for(int j = 100; j <= 400; j+=100){
                if (x >= i &&x<=i+50 && y >= j && y <=j+50 ) {
                        
                      
            }
        }
        }
    


        for(int i = 100; i <= 400; i+=100){
            for(int j = 150; j <= 450; j+=100){
                if (x >= i && x<=i+50 && y >= j && y <=j+50 ) {
                        findred(i,j);
                        g.setColor(Color.YELLOW);
                        g.drawRect(i-50,j+50,50,50);      
                        g.drawRect(i+50,j+50,50,50);   
                }
        }
    }
    }
    
    @Override
    public void paint(Graphics g){
        setBackground(Color.LIGHT_GRAY);
        board();
        ResetPiece();
        print();
    }
    public void mouseClicked(MouseEvent e) {}  
    public void mouseEntered(MouseEvent e) {}  
    public void mouseExited(MouseEvent e) {}  
    public void mousePressed(MouseEvent e) {
        Graphics g=getGraphics();  
        l.setText("X="+e.getX()+", Y="+e.getY());
      } 
    
    public void mouseReleased(MouseEvent e) {
        board();
        print();
        findpiece(e.getX(), e.getY());
    }
    
   public static void main(String[] args) {  
       new MouseMovement();  
       
   }
   
}  

